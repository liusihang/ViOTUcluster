#!/usr/bin/env bash

# 记录开始时间
start_time=$(date +%s)

# 初始化变量
INPUT_DIR=""
RAW_SEQ_DIR=""
OUTPUT_DIR=""
DATABASE=""
SAMPLETYPE=""
REASSEMBLE=false
VERSION="0.1.1"  # 定义版本号
CONCENTRATION_TYPE=""
THREADS="0"  # 默认线程数为当前可用核心最大值

# 设置日志文件路径
LOG_FILE=""

# 记录日志时添加时间戳的函数
log_with_timestamp() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# 使用 getopts 处理短选项和手动处理长选项
while [[ $# -gt 0 ]]; do
  case $1 in
    -i)
      INPUT_DIR=$2
      shift 2
      ;;
    -r)
      RAW_SEQ_DIR=$2
      shift 2
      ;;
    -o)
      OUTPUT_DIR=$2
      LOG_FILE="${OUTPUT_DIR}/pipeline.log"  # 设置日志文件路径
      shift 2
      ;;
    -d)
      DATABASE=$2
      shift 2
      ;;
    -t)
      SAMPLETYPE=$2
      shift 2
      ;;
    -n)
      THREADS=$2
      shift 2
      ;;
    -v)
      echo "Version: $VERSION"
      exit 0
      ;;
    --non-con)
      CONCENTRATION_TYPE="non-concentration"
      shift
      ;;
    --con)
      CONCENTRATION_TYPE="concentration"
      shift
      ;;
    -h)
      echo "Usage: $0 [options]"
      echo ""
      echo "Options:"
      echo "  -i <input_path_to_search>   Specify the input directory to search for FASTA files."
      echo "  -r <input_path_raw_seqs>    Specify the input directory to search for raw seqs files."
      echo "  -o <output_path>            Specify the output directory for the results."
      echo "  -d <database_path>          Specify the path to the database required for analysis."
      echo "  -t <sample_type>            Specify the sample type: DNA, RNA, or Mix."
      echo "  -n <threads>                Specify the number of threads to use (default: Use max available cores throughout the entire pipeline)."
      echo "  --non-con                   Specify non-concentration processing."
      echo "  --con                       Specify concentration processing."
      echo "  --reassemble                Enable reassembly of bins."
      echo "  -v                          Display the version of this script."
      echo "  -h                          Display this help and exit."
      exit 0
      ;;
    --reassemble)
      REASSEMBLE=true
      shift
      ;;
    *)
      echo "Unknown option: $1" >&2
      exit 1
      ;;
  esac
done

# 检查必要的输入是否已提供
if [ -z "$INPUT_DIR" ] || [ -z "$RAW_SEQ_DIR" ] || [ -z "$OUTPUT_DIR" ] || [ -z "$DATABASE" ] || [ -z "$SAMPLETYPE" ] || [ -z "$CONCENTRATION_TYPE" ]; then
    echo "Usage: $0 -i <input_path_to_search> -r <input_path_raw_seqs> -o <output_path> -d <database_path> -t <sample_type> -n <threads> --non-con/--con [--reassemble]"
    exit 1
fi

# 模块执行函数，检查是否报错并添加时间戳
run_module() {
    local module_name=$1
    local log_file=$2
    local command=$3

    log_with_timestamp "Starting $module_name..."
    module_start_time=$(date +%s)
    eval "$command" > "$log_file" 2>&1
    if [ $? -ne 0 ]; then
        log_with_timestamp "Error: $module_name failed. Check log: $log_file"
        exit 1
    fi
    module_end_time=$(date +%s)
    module_runtime=$((module_end_time - module_start_time))
    log_with_timestamp "$module_name completed in ${module_runtime} seconds."
}

# Determine THREADS_PER_FILE based on THREADS input
if [ "$THREADS" -eq 0 ]; then
  THREADS_PER_FILE=$(nproc)
else
  if [ "$num_files" -gt 0 ]; then
    THREADS_PER_FILE=$((THREADS / num_files))
    if [ "$THREADS_PER_FILE" -lt 1 ]; then
      THREADS_PER_FILE=1
    fi
  else
    log_with_timestamp "Assign threads error. Exiting..."
    exit 1
  fi
fi

#Test
THREADS_PER_FILE=$THREADS

# 验证配对文件是否存在并且格式正确
for FILE in "${RAW_SEQ_DIR}"/*_R1.*; do
  BASENAME=$(basename "$FILE" | sed 's/_R1\..*//')
  PREFIX="${RAW_SEQ_DIR}/${BASENAME}"

  if [ -f "${PREFIX}_R1.fq" ] && [ -f "${PREFIX}_R2.fq" ]; then
    log_with_timestamp "Found paired files: ${PREFIX}_R1.fq and ${PREFIX}_R2.fq"
  elif [ -f "${PREFIX}_R1.fastq" ] && [ -f "${PREFIX}_R2.fastq" ]; then
    log_with_timestamp "Found paired files: ${PREFIX}_R1.fastq and ${PREFIX}_R2.fastq"
  elif [ -f "${PREFIX}_R1.fq.gz" ] && [ -f "${PREFIX}_R2.fq.gz" ]; then
    log_with_timestamp "Found paired files: ${PREFIX}_R1.fq.gz and ${PREFIX}_R2.fq.gz"
  elif [ -f "${PREFIX}_R1.fastq.gz" ] && [ -f "${PREFIX}_R2.fastq.gz" ]; then
    log_with_timestamp "Found paired files: ${PREFIX}_R1.fastq.gz and ${PREFIX}_R2.fastq.gz"
  else
    log_with_timestamp "Error: Paired-end files for ${BASENAME} not found in the expected formats (.fq, .fastq, .fq.gz, .fastq.gz)"
    exit 1
  fi
done

# 根据 CONCENTRATION_TYPE 进行不同的处理
if [ "$CONCENTRATION_TYPE" == "non-concentration" ]; then
    log_with_timestamp "Running non-concentration specific steps..."
elif [ "$CONCENTRATION_TYPE" == "concentration" ]; then
    log_with_timestamp "Running concentration specific steps..."
else
    log_with_timestamp "Error: Invalid concentration type."
    exit 1
fi

# 重定向所有输出到日志文件
exec > >(tee -a "$LOG_FILE" | while IFS= read -r line; do log_with_timestamp "$line"; done) 2>&1

# 导出参数作为环境变量
export INPUT_DIR OUTPUT_DIR DATABASE SAMPLETYPE REASSEMBLE RAW_SEQ_DIR THREADS

# 执行模块
run_module "Viral prediction" "${OUTPUT_DIR}/Log/viral_prediction.log" "viral_prediction_module.sh"
run_module "Cross Validation" "${OUTPUT_DIR}/Log/cross_validation.log" "cross_validation_module.sh --${CONCENTRATION_TYPE}"
run_module "Binning and merge" "${OUTPUT_DIR}/Log/binning_merge.log" "binning_merge_module.sh"
run_module "Summary" "${OUTPUT_DIR}/Log/summary.log" "summary_module.sh"
run_module "dRep" "${OUTPUT_DIR}/Log/drep.log" "drep_module.sh"
run_module "TPM calculate" "${OUTPUT_DIR}/Log/TPM_caculate.log" "TPM_caculate_Module.sh"
run_module "DRAM" "${OUTPUT_DIR}/Log/DRAM.log" "run_dram_analysis.sh ${OUTPUT_DIR}/Summary/Viralcontigs/vOTU.fasta ${OUTPUT_DIR}/Summary/DRAM"
run_module "iPhop" "${OUTPUT_DIR}/Log/iPhop.log" "run_iphop_analysis.sh ${OUTPUT_DIR}/Summary/Viralcontigs/vOTU.fasta ${OUTPUT_DIR}/Summary/iPhop"

# 记录结束时间并计算整个流程的总耗时
end_time=$(date +%s)
total_runtime=$((end_time - start_time))
log_with_timestamp "Total runtime: ${total_runtime} seconds"