#!/usr/bin/env bash

# Record start time
start_time=$(date +%s)

# Initialize variables
RAW_SEQ_DIR=""
OUTPUT_DIR=""
DATABASE=""
SAMPLETYPE=""
ASSEMBLY_SOFTWARE=""
REASSEMBLE=false
VERSION="0.2.0"  # Define version number
CONCENTRATION_TYPE=""
LOG_FILE=""

# Function to add timestamp to log entries
log_with_timestamp() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Function to run modules with a spinner animation and error handling
run_module() {
    local module_name="$1"
    local log_file="$2"
    local command="$3"

    log_with_timestamp "Starting $module_name..."
    echo "Starting $module_name..."

    # Start spinner animation
    local spin='-\|/'
    local i=0
    tput civis > /dev/tty  # Hide cursor
    (
        while true; do
            i=$(( (i+1) % 4 ))
            printf "\rRunning %s... %s" "$module_name" "${spin:$i:1}" > /dev/tty
            sleep 0.1
        done
    ) &
    local spinner_pid=$!

    local module_start_time=$(date +%s)

    # Run the command with timestamped logs
    eval "$command" | tee -a "$log_file" | while IFS= read -r line; do
        log_with_timestamp "$line"
    done

    local result=${PIPESTATUS[0]}

    # Stop spinner
    kill "$spinner_pid" 2>/dev/null
    wait "$spinner_pid" 2>/dev/null
    tput cnorm > /dev/tty  # Show cursor

    # Clear spinner line
    printf "\r\033[K"

    if [ "$result" -ne 0 ]; then
        log_with_timestamp "Error: $module_name failed. Check log: $log_file"
        echo "$module_name failed. Check log: $log_file"
        exit 1
    fi

    local module_end_time=$(date +%s)
    local module_runtime=$((module_end_time - module_start_time))
    log_with_timestamp "$module_name completed in ${module_runtime} seconds."
    echo "$module_name completed in ${module_runtime} seconds."
}

# Handle command-line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -r) RAW_SEQ_DIR=$2; shift 2 ;;
    -o) OUTPUT_DIR=$2; LOG_FILE="${OUTPUT_DIR}/pipeline.log"; shift 2 ;;
    -d) DATABASE=$2; shift 2 ;;
    -a) ASSEMBLY_SOFTWARE=$2; shift 2 ;;
    --non-con) CONCENTRATION_TYPE="non-concentration"; shift ;;
    --con) CONCENTRATION_TYPE="concentration"; shift ;;
    --reassemble) REASSEMBLE=true; shift ;;
    -h)
      echo "Usage: $0 [options]"
      echo "  -r <input_path_raw_seqs>"
      echo "  -o <output_path>"
      echo "  -d <database_path>"
      echo "  -a <assembly_software>"
      echo "  --non-con | --con"
      exit 0
      ;;
    *) echo "Unknown option: $1"; exit 1 ;;
  esac
done

# Ensure necessary inputs are provided
if [ -z "$RAW_SEQ_DIR" ] || [ -z "$OUTPUT_DIR" ] || [ -z "$DATABASE" ] || [ -z "$CONCENTRATION_TYPE" ] || [ -z "$ASSEMBLY_SOFTWARE" ]; then
    echo "Error: Missing required parameters."
    exit 1
fi

# Validate assembly software
if [[ "$ASSEMBLY_SOFTWARE" != "megahit" && "$ASSEMBLY_SOFTWARE" != "metaspades" ]]; then
    echo "Error: Invalid assembly software."
    exit 1
fi

# Create log file
mkdir -p "$OUTPUT_DIR"
touch "$LOG_FILE"

# Log the command with a timestamp
log_with_timestamp "Run script as command: $0 $@"

# Redirect all output to the log file and terminal
exec > >(tee -a "$LOG_FILE" | while IFS= read -r line; do log_with_timestamp "$line"; done) 2>&1

# Check if paired files exist and validate their formats
for FILE in "${RAW_SEQ_DIR}"/*_R1.*; do
  BASENAME=$(basename "$FILE" | sed 's/_R1\..*//')
  PREFIX="${RAW_SEQ_DIR}/${BASENAME}"

  if [ -f "${PREFIX}_R1.fq" ] && [ -f "${PREFIX}_R2.fq" ]; then
    log_with_timestamp "Found paired files: ${PREFIX}_R1.fq and ${PREFIX}_R2.fq"
  else
    log_with_timestamp "Error: Paired-end files for ${BASENAME} not found."
    exit 1
  fi
done

# Run preprocessing module
run_module "Preprocessing" "${OUTPUT_DIR}/Log/preprocess.log" "Preprocess_module.sh '${RAW_SEQ_DIR}' '${ASSEMBLY_SOFTWARE}' '${OUTPUT_DIR}'"

# Export necessary variables
export OUTPUT_DIR DATABASE SAMPLETYPE ASSEMBLY_SOFTWARE RAW_SEQ_DIR

# Run filtering module
mkdir -p "${OUTPUT_DIR}/FilteredSeqs"
run_module "Filtering" "${OUTPUT_DIR}/Log/filtering.log" "python filter_contigs.py 300 ${RAW_SEQ_DIR} ${OUTPUT_DIR}/FilteredSeqs"

# Define concentration-specific processing
if [ "$CONCENTRATION_TYPE" == "concentration" ]; then
    log_with_timestamp "Running concentration-specific steps..."
    run_module "Concentration Analysis" "${OUTPUT_DIR}/Log/concentration.log" "concentration_analysis.sh"
else
    log_with_timestamp "Running non-concentration-specific steps..."
    run_module "Non-Concentration Analysis" "${OUTPUT_DIR}/Log/non_concentration.log" "non_concentration_analysis.sh"
fi

# Record end time and calculate total runtime
end_time=$(date +%s)
total_runtime=$((end_time - start_time))
log_with_timestamp "Total runtime: ${total_runtime} seconds."
echo "Total runtime: ${total_runtime} seconds."
